name: Scrape TradingView + publish + notify Make

permissions:
  contents: write
  pages: write
  id-token: write 
  
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  scrape-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm (global)
        run: npm install -g pnpm@latest

      - name: Configure pnpm store-dir
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps (pnpm) — supports missing lockfile
        run: |
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install
          fi

      # --- novo: garantir que o Chromium que o Puppeteer espera esteja instalado ---
      - name: Puppeteer: download Chromium (preferred)
        run: |
          echo "Attempting to download Chromium for Puppeteer..."
          # tenta usar pnpm dlx (mais rápido/isolado) — se falhar, usa npx
          if pnpm dlx --version >/dev/null 2>&1; then
            pnpm dlx puppeteer@latest browsers install chrome || true
          else
            npx puppeteer@latest browsers install chrome || true
          fi
          echo "ls -la ~/.cache/puppeteer || true"
          ls -la ~/.cache/puppeteer || true
        shell: bash

      - name: Cache Puppeteer browser (~/.cache/puppeteer)
        uses: actions/cache@v4
        with:
          path: ~/.cache/puppeteer
          key: ${{ runner.os }}-puppeteer-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-puppeteer-cache-

      # Run scraping
      - name: Run scraper and write summary
        id: run_scraper
        run: |
          node src/generate-feed.js
          node src/write-scrape-summary.js
          cat scrape_summary.txt || true

      - name: Read summary
        id: read_summary
        run: |
          TOTAL=$(grep 'TOTAL_ITEMS' scrape_summary.txt | cut -d'=' -f2 || echo 0)
          NEW=$(grep 'NEW_ITEMS' scrape_summary.txt | cut -d'=' -f2 || echo 0)
          echo "total=${TOTAL}" >> $GITHUB_OUTPUT
          echo "new=${NEW}" >> $GITHUB_OUTPUT

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scraper-debug
          path: |
            page.html
            page.png
            feed.json
            diff.json

      - name: Commit feed.json to gh-pages (if new items)
        if: steps.read_summary.outputs.new != '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p public
          cp feed.json public/feed.json
          git add public/feed.json || true
          git commit -m "Update feed.json (auto)" || echo "no changes"

      - name: Deploy to gh-pages via action
        if: steps.read_summary.outputs.new != '0'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

      - name: Notify Make webhook with diff.json (robust)
        if: steps.read_summary.outputs.new != '0'
        env:
          MAKE_WEBHOOK: ${{ secrets.MAKE_WEBHOOK }}
        run: |
          echo "Posting diff.json to Make..."
          RESPONSE=$(curl -s -w "%{http_code}" -o response.txt -X POST \
            -H "Content-Type: application/json" \
            --data-binary @diff.json \
            "$MAKE_WEBHOOK")
          echo "HTTP status: $RESPONSE"
          echo "Response body:"
          cat response.txt
          if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "202" ]; then
            echo "❌ Failed to post diff.json (http $RESPONSE)"
            exit 1
          fi

      - name: Show artifacts
        if: always()
        run: |
          echo "feed.json (first lines):"
          head -n 20 feed.json || true
          echo "diff.json (first lines):"
          head -n 20 diff.json || true
          echo "scrape_summary.txt:"
          cat scrape_summary.txt || true
